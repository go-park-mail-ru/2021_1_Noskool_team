// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	models "2021_1_Noskool_team/internal/app/search/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// SearchContent mocks base method.
func (m *MockUsecase) SearchContent(searchQuery string) *models.Search {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContent", searchQuery)
	ret0, _ := ret[0].(*models.Search)
	return ret0
}

// SearchContent indicates an expected call of SearchContent.
func (mr *MockUsecaseMockRecorder) SearchContent(searchQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContent", reflect.TypeOf((*MockUsecase)(nil).SearchContent), searchQuery)
}
