// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_tracks is a generated GoMock package.
package mock_tracks

import (
	models "2021_1_Noskool_team/internal/app/tracks/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetTrackByID mocks base method
func (m *MockUsecase) GetTrackByID(trackID int) (*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", trackID)
	ret0, _ := ret[0].(*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID
func (mr *MockUsecaseMockRecorder) GetTrackByID(trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockUsecase)(nil).GetTrackByID), trackID)
}

// GetTracksByTittle mocks base method
func (m *MockUsecase) GetTracksByTittle(trackTittle string) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByTittle", trackTittle)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByTittle indicates an expected call of GetTracksByTittle
func (mr *MockUsecaseMockRecorder) GetTracksByTittle(trackTittle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByTittle", reflect.TypeOf((*MockUsecase)(nil).GetTracksByTittle), trackTittle)
}

// GetTrackByMusicianID mocks base method
func (m *MockUsecase) GetTrackByMusicianID(musicianID int) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByMusicianID", musicianID)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByMusicianID indicates an expected call of GetTrackByMusicianID
func (mr *MockUsecaseMockRecorder) GetTrackByMusicianID(musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByMusicianID", reflect.TypeOf((*MockUsecase)(nil).GetTrackByMusicianID), musicianID)
}
