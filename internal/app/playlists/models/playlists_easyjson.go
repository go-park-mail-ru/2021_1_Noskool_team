// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	models "2021_1_Noskool_team/internal/app/tracks/models"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlist_id":
			out.PlaylistID = int(in.Int())
		case "tittle":
			out.Tittle = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "user_id":
			out.UserID = int(in.Int())
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]*models.Track, 0, 8)
					} else {
						out.Tracks = []*models.Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *models.Track
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(models.Track)
						}
						easyjsonB2c5512fDecode20211NoskoolTeamInternalAppTracksModels(in, v1)
					}
					out.Tracks = append(out.Tracks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlist_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlaylistID))
	}
	{
		const prefix string = ",\"tittle\":"
		out.RawString(prefix)
		out.String(string(in.Tittle))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tracks {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjsonB2c5512fEncode20211NoskoolTeamInternalAppTracksModels(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(l, v)
}
func easyjsonB2c5512fDecode20211NoskoolTeamInternalAppTracksModels(in *jlexer.Lexer, out *models.Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "track_id":
			out.TrackID = int(in.Int())
		case "tittle":
			out.Tittle = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "audio":
			out.Audio = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Genres = append(out.Genres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "musicians":
			if in.IsNull() {
				in.Skip()
				out.Musicians = nil
			} else {
				in.Delim('[')
				if out.Musicians == nil {
					if !in.IsDelim(']') {
						out.Musicians = make([]string, 0, 4)
					} else {
						out.Musicians = []string{}
					}
				} else {
					out.Musicians = (out.Musicians)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Musicians = append(out.Musicians, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "album":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]string, 0, 4)
					} else {
						out.Albums = []string{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Albums = append(out.Albums, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalAppTracksModels(out *jwriter.Writer, in models.Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"track_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TrackID))
	}
	{
		const prefix string = ",\"tittle\":"
		out.RawString(prefix)
		out.String(string(in.Tittle))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		out.String(string(in.Audio))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Genres {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"musicians\":"
		out.RawString(prefix)
		if in.Musicians == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Musicians {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"album\":"
		out.RawString(prefix)
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Albums {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
