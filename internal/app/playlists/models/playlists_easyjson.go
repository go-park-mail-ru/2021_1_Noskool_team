// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	models3 "2021_1_Noskool_team/internal/app/album/models"
	models2 "2021_1_Noskool_team/internal/app/musicians/models"
	models "2021_1_Noskool_team/internal/app/tracks/models"
	models1 "2021_1_Noskool_team/internal/models"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(in *jlexer.Lexer, out *Playlists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Playlists, 0, 8)
			} else {
				*out = Playlists{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Playlist
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Playlist)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(out *jwriter.Writer, in Playlists) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Playlists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels(l, v)
}
func easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels1(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlist_id":
			out.PlaylistID = int(in.Int())
		case "tittle":
			out.Tittle = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "user_id":
			out.UserID = int(in.Int())
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]*models.Track, 0, 8)
					} else {
						out.Tracks = []*models.Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *models.Track
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(models.Track)
						}
						easyjsonB2c5512fDecode20211NoskoolTeamInternalAppTracksModels(in, v4)
					}
					out.Tracks = append(out.Tracks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels1(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlist_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlaylistID))
	}
	{
		const prefix string = ",\"tittle\":"
		out.RawString(prefix)
		out.String(string(in.Tittle))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tracks {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjsonB2c5512fEncode20211NoskoolTeamInternalAppTracksModels(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB2c5512fEncode20211NoskoolTeamInternalAppPlaylistsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB2c5512fDecode20211NoskoolTeamInternalAppPlaylistsModels1(l, v)
}
func easyjsonB2c5512fDecode20211NoskoolTeamInternalAppTracksModels(in *jlexer.Lexer, out *models.Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "track_id":
			out.TrackID = int(in.Int())
		case "tittle":
			out.Tittle = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "audio":
			out.Audio = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "duration":
			out.Duration = string(in.String())
		case "in_mediateka":
			out.InMediateka = bool(in.Bool())
		case "in_favorite":
			out.InFavorite = bool(in.Bool())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]*models1.Genre, 0, 8)
					} else {
						out.Genres = []*models1.Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *models1.Genre
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(models1.Genre)
						}
						easyjsonB2c5512fDecode20211NoskoolTeamInternalModels(in, v7)
					}
					out.Genres = append(out.Genres, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "musicians":
			if in.IsNull() {
				in.Skip()
				out.Musicians = nil
			} else {
				in.Delim('[')
				if out.Musicians == nil {
					if !in.IsDelim(']') {
						out.Musicians = make([]*models2.Musician, 0, 8)
					} else {
						out.Musicians = []*models2.Musician{}
					}
				} else {
					out.Musicians = (out.Musicians)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *models2.Musician
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(models2.Musician)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Musicians = append(out.Musicians, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "album":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]*models3.Album, 0, 8)
					} else {
						out.Albums = []*models3.Album{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *models3.Album
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(models3.Album)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.Albums = append(out.Albums, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalAppTracksModels(out *jwriter.Writer, in models.Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"track_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TrackID))
	}
	{
		const prefix string = ",\"tittle\":"
		out.RawString(prefix)
		out.String(string(in.Tittle))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		out.String(string(in.Audio))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.String(string(in.Duration))
	}
	{
		const prefix string = ",\"in_mediateka\":"
		out.RawString(prefix)
		out.Bool(bool(in.InMediateka))
	}
	{
		const prefix string = ",\"in_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.InFavorite))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Genres {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					easyjsonB2c5512fEncode20211NoskoolTeamInternalModels(out, *v11)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"musicians\":"
		out.RawString(prefix)
		if in.Musicians == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Musicians {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"album\":"
		out.RawString(prefix)
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Albums {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonB2c5512fDecode20211NoskoolTeamInternalModels(in *jlexer.Lexer, out *models1.Genre) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genre_id":
			out.GenreID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB2c5512fEncode20211NoskoolTeamInternalModels(out *jwriter.Writer, in models1.Genre) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genre_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GenreID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
