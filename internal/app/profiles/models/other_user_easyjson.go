// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	models "2021_1_Noskool_team/internal/app/playlists/models"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels(in *jlexer.Lexer, out *OtherUserFullInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "I_subscribed":
			out.ISubscribed = bool(in.Bool())
		case "subscriptions":
			if in.IsNull() {
				in.Skip()
				out.Subscriptions = nil
			} else {
				in.Delim('[')
				if out.Subscriptions == nil {
					if !in.IsDelim(']') {
						out.Subscriptions = make([]*OtherUser, 0, 8)
					} else {
						out.Subscriptions = []*OtherUser{}
					}
				} else {
					out.Subscriptions = (out.Subscriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *OtherUser
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(OtherUser)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Subscriptions = append(out.Subscriptions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subscribers":
			if in.IsNull() {
				in.Skip()
				out.Subscribers = nil
			} else {
				in.Delim('[')
				if out.Subscribers == nil {
					if !in.IsDelim(']') {
						out.Subscribers = make([]*OtherUser, 0, 8)
					} else {
						out.Subscribers = []*OtherUser{}
					}
				} else {
					out.Subscribers = (out.Subscribers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *OtherUser
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(OtherUser)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Subscribers = append(out.Subscribers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playlists":
			if in.IsNull() {
				in.Skip()
				out.Playlists = nil
			} else {
				in.Delim('[')
				if out.Playlists == nil {
					if !in.IsDelim(']') {
						out.Playlists = make([]*models.Playlist, 0, 8)
					} else {
						out.Playlists = []*models.Playlist{}
					}
				} else {
					out.Playlists = (out.Playlists)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *models.Playlist
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(models.Playlist)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Playlists = append(out.Playlists, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels(out *jwriter.Writer, in OtherUserFullInformation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"I_subscribed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ISubscribed))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		if in.Subscriptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Subscriptions {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		if in.Subscribers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Subscribers {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"playlists\":"
		out.RawString(prefix)
		if in.Playlists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Playlists {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherUserFullInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherUserFullInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherUserFullInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherUserFullInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels(l, v)
}
func easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels1(in *jlexer.Lexer, out *OtherUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "I_subscribed":
			out.ISubscribed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels1(out *jwriter.Writer, in OtherUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"I_subscribed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ISubscribed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson188af5b8Encode20211NoskoolTeamInternalAppProfilesModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson188af5b8Decode20211NoskoolTeamInternalAppProfilesModels1(l, v)
}
