// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_musicians is a generated GoMock package.
package mock_musicians

import (
	models "2021_1_Noskool_team/internal/app/musicians/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddMusicianToFavorites mocks base method.
func (m *MockUsecase) AddMusicianToFavorites(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMusicianToFavorites", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMusicianToFavorites indicates an expected call of AddMusicianToFavorites.
func (mr *MockUsecaseMockRecorder) AddMusicianToFavorites(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMusicianToFavorites", reflect.TypeOf((*MockUsecase)(nil).AddMusicianToFavorites), userID, musicianID)
}

// AddMusicianToMediateka mocks base method.
func (m *MockUsecase) AddMusicianToMediateka(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMusicianToMediateka", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMusicianToMediateka indicates an expected call of AddMusicianToMediateka.
func (mr *MockUsecaseMockRecorder) AddMusicianToMediateka(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMusicianToMediateka", reflect.TypeOf((*MockUsecase)(nil).AddMusicianToMediateka), userID, musicianID)
}

// CheckMusicianInFavorite mocks base method.
func (m *MockUsecase) CheckMusicianInFavorite(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMusicianInFavorite", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMusicianInFavorite indicates an expected call of CheckMusicianInFavorite.
func (mr *MockUsecaseMockRecorder) CheckMusicianInFavorite(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMusicianInFavorite", reflect.TypeOf((*MockUsecase)(nil).CheckMusicianInFavorite), userID, musicianID)
}

// CheckMusicianInMediateka mocks base method.
func (m *MockUsecase) CheckMusicianInMediateka(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMusicianInMediateka", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMusicianInMediateka indicates an expected call of CheckMusicianInMediateka.
func (mr *MockUsecaseMockRecorder) CheckMusicianInMediateka(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMusicianInMediateka", reflect.TypeOf((*MockUsecase)(nil).CheckMusicianInMediateka), userID, musicianID)
}

// DeleteMusicianFromFavorites mocks base method.
func (m *MockUsecase) DeleteMusicianFromFavorites(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusicianFromFavorites", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusicianFromFavorites indicates an expected call of DeleteMusicianFromFavorites.
func (mr *MockUsecaseMockRecorder) DeleteMusicianFromFavorites(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusicianFromFavorites", reflect.TypeOf((*MockUsecase)(nil).DeleteMusicianFromFavorites), userID, musicianID)
}

// DeleteMusicianFromMediateka mocks base method.
func (m *MockUsecase) DeleteMusicianFromMediateka(userID, musicianID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusicianFromMediateka", userID, musicianID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusicianFromMediateka indicates an expected call of DeleteMusicianFromMediateka.
func (mr *MockUsecaseMockRecorder) DeleteMusicianFromMediateka(userID, musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusicianFromMediateka", reflect.TypeOf((*MockUsecase)(nil).DeleteMusicianFromMediateka), userID, musicianID)
}

// GetGenreForMusician mocks base method.
func (m *MockUsecase) GetGenreForMusician(nameMusician string) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreForMusician", nameMusician)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreForMusician indicates an expected call of GetGenreForMusician.
func (mr *MockUsecaseMockRecorder) GetGenreForMusician(nameMusician interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreForMusician", reflect.TypeOf((*MockUsecase)(nil).GetGenreForMusician), nameMusician)
}

// GetMusicianByAlbumID mocks base method.
func (m *MockUsecase) GetMusicianByAlbumID(albumID int) (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicianByAlbumID", albumID)
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicianByAlbumID indicates an expected call of GetMusicianByAlbumID.
func (mr *MockUsecaseMockRecorder) GetMusicianByAlbumID(albumID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicianByAlbumID", reflect.TypeOf((*MockUsecase)(nil).GetMusicianByAlbumID), albumID)
}

// GetMusicianByID mocks base method.
func (m *MockUsecase) GetMusicianByID(musicianID int) (*models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicianByID", musicianID)
	ret0, _ := ret[0].(*models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicianByID indicates an expected call of GetMusicianByID.
func (mr *MockUsecaseMockRecorder) GetMusicianByID(musicianID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicianByID", reflect.TypeOf((*MockUsecase)(nil).GetMusicianByID), musicianID)
}

// GetMusicianByPlaylistID mocks base method.
func (m *MockUsecase) GetMusicianByPlaylistID(playlistID int) (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicianByPlaylistID", playlistID)
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicianByPlaylistID indicates an expected call of GetMusicianByPlaylistID.
func (mr *MockUsecaseMockRecorder) GetMusicianByPlaylistID(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicianByPlaylistID", reflect.TypeOf((*MockUsecase)(nil).GetMusicianByPlaylistID), playlistID)
}

// GetMusicianByTrackID mocks base method.
func (m *MockUsecase) GetMusicianByTrackID(trackID int) (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicianByTrackID", trackID)
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicianByTrackID indicates an expected call of GetMusicianByTrackID.
func (mr *MockUsecaseMockRecorder) GetMusicianByTrackID(trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicianByTrackID", reflect.TypeOf((*MockUsecase)(nil).GetMusicianByTrackID), trackID)
}

// GetMusicians mocks base method.
func (m *MockUsecase) GetMusicians() (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicians")
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicians indicates an expected call of GetMusicians.
func (mr *MockUsecaseMockRecorder) GetMusicians() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicians", reflect.TypeOf((*MockUsecase)(nil).GetMusicians))
}

// GetMusiciansByGenre mocks base method.
func (m *MockUsecase) GetMusiciansByGenre(genre string) (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusiciansByGenre", genre)
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusiciansByGenre indicates an expected call of GetMusiciansByGenre.
func (mr *MockUsecaseMockRecorder) GetMusiciansByGenre(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusiciansByGenre", reflect.TypeOf((*MockUsecase)(nil).GetMusiciansByGenre), genre)
}

// GetMusiciansFavorites mocks base method.
func (m *MockUsecase) GetMusiciansFavorites(userID int) ([]*models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusiciansFavorites", userID)
	ret0, _ := ret[0].([]*models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusiciansFavorites indicates an expected call of GetMusiciansFavorites.
func (mr *MockUsecaseMockRecorder) GetMusiciansFavorites(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusiciansFavorites", reflect.TypeOf((*MockUsecase)(nil).GetMusiciansFavorites), userID)
}

// GetMusiciansMediateka mocks base method.
func (m *MockUsecase) GetMusiciansMediateka(userID int) ([]*models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusiciansMediateka", userID)
	ret0, _ := ret[0].([]*models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusiciansMediateka indicates an expected call of GetMusiciansMediateka.
func (mr *MockUsecaseMockRecorder) GetMusiciansMediateka(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusiciansMediateka", reflect.TypeOf((*MockUsecase)(nil).GetMusiciansMediateka), userID)
}

// GetMusiciansTop4 mocks base method.
func (m *MockUsecase) GetMusiciansTop4() (*[]models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusiciansTop4")
	ret0, _ := ret[0].(*[]models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusiciansTop4 indicates an expected call of GetMusiciansTop4.
func (mr *MockUsecaseMockRecorder) GetMusiciansTop4() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusiciansTop4", reflect.TypeOf((*MockUsecase)(nil).GetMusiciansTop4))
}
